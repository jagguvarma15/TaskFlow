name: TaskFlow CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Frontend Tests and Build
  frontend:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Cache frontend dependencies
      uses: actions/cache@v4
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json', 'frontend/package.json') }}
        restore-keys: |
          ${{ runner.os }}-frontend-

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: |
        # Clean install to avoid dependency conflicts
        rm -rf node_modules package-lock.json
        npm cache clean --force
        
        # Force specific ajv version to resolve conflicts
        npm install ajv@^8.0.0 --save-dev --legacy-peer-deps
        npm install --legacy-peer-deps

    - name: Run frontend linting
      working-directory: ./frontend
      run: |
        npm run lint --if-present || echo "No lint script found, skipping..."

    - name: Run frontend tests
      working-directory: ./frontend
      run: |
        npm test -- --coverage --watchAll=false --passWithNoTests
      env:
        CI: true

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Upload frontend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/
        retention-days: 1

  # Backend Tests and Build
  backend:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: taskflow
          POSTGRES_PASSWORD: taskflow_password
          POSTGRES_DB: taskflow
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Cache backend dependencies
      uses: actions/cache@v4
      with:
        path: backend/node_modules
        key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-backend-

    - name: Install backend dependencies
      working-directory: ./backend
      run: |
        npm ci || npm install

    - name: Run backend linting
      working-directory: ./backend
      run: |
        npm run lint --if-present || echo "No lint script found, skipping..."

    - name: Run backend tests
      working-directory: ./backend
      run: npm test -- --coverage --passWithNoTests
      env:
        NODE_ENV: test
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: taskflow
        DB_PASSWORD: taskflow_password
        DB_NAME: taskflow
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ""

    - name: Build backend
      working-directory: ./backend
      run: npm run build

    - name: Upload backend build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/dist/
        retention-days: 1

  # Docker Build and Test
  docker-build:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and test frontend Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Build and test backend Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

    - name: Test Docker Compose setup
      run: |
        # Test that docker-compose files are valid
        docker compose config
        docker compose -f docker-compose.monitoring.yml config
        
        # Start core services for integration testing
        docker compose up postgres redis -d
        
        # Wait for services to be ready
        sleep 10
        
        # Test database connectivity
        docker compose exec -T postgres pg_isready -U taskflow
        
        # Cleanup
        docker compose down -v

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build frontend image for scanning
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: taskflow-frontend:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build backend image for scanning
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: taskflow-backend:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run Trivy vulnerability scanner on frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'taskflow-frontend:latest'
        format: 'sarif'
        output: 'trivy-frontend.sarif'

    - name: Run Trivy vulnerability scanner on backend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'taskflow-backend:latest'
        format: 'sarif'
        output: 'trivy-backend.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: '.'

  # Deploy (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [frontend, backend, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: frontend/build/

    - name: Download backend artifacts
      uses: actions/download-artifact@v4
      with:
        name: backend-build
        path: backend/dist/

    - name: Build and push frontend image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        labels: |
          org.opencontainers.image.title=TaskFlow Frontend
          org.opencontainers.image.description=React frontend for TaskFlow
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.revision=${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push backend image
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest
        labels: |
          org.opencontainers.image.title=TaskFlow Backend
          org.opencontainers.image.description=Node.js backend API for TaskFlow
          org.opencontainers.image.source=${{ github.repositoryUrl }}
          org.opencontainers.image.revision=${{ github.sha }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Update deployment status
      run: |
        echo "::notice title=Deployment Success::TaskFlow containers have been built and pushed to registry"
        echo "Frontend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest"
        echo "Backend: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"